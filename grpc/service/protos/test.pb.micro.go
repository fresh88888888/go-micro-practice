// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: test.proto

// 包名

package protos

import (
	fmt "fmt"
	math "math"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"

	context "context"

	"github.com/asim/go-micro/v3/api"
	"github.com/asim/go-micro/v3/client"
	"github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TestService service

func NewTestServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "TestService.Call",
			Path:    []string{"/test/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for TestService service

type TestService interface {
	Call(ctx context.Context, in *TestRequest, opts ...client.CallOption) (*TestResponse, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) Call(ctx context.Context, in *TestRequest, opts ...client.CallOption) (*TestResponse, error) {
	req := c.c.NewRequest(c.name, "TestService.Call", in)
	out := new(TestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceHandler interface {
	Call(context.Context, *TestRequest, *TestResponse) error
}

func RegisterTestServiceHandler(s server.Server, hdlr TestServiceHandler, opts ...server.HandlerOption) error {
	type testService interface {
		Call(ctx context.Context, in *TestRequest, out *TestResponse) error
	}
	type TestService struct {
		testService
	}
	h := &testServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TestService.Call",
		Path:    []string{"/test/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&TestService{h}, opts...))
}

type testServiceHandler struct {
	TestServiceHandler
}

func (h *testServiceHandler) Call(ctx context.Context, in *TestRequest, out *TestResponse) error {
	return h.TestServiceHandler.Call(ctx, in, out)
}
